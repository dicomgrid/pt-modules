name: Terraform Validation

on:
  pull_request:
    branches: [master]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.tfvars.json'
  push:
    branches: [master]
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.tfvars.json'

jobs:
  terraform-validation:
    runs-on: ubuntu-latest
    name: Terraform Validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate diffs

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.7.0

      - name: Find Changed Terraform modules
        id: find-modules
        run: |
          # For push events, validate all modules
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Push event detected - validating all modules"
            modules=$(find . -name "*.tf" -type f | sed 's|/[^/]*$||' | sort -u | grep -v ".terraform")
          else
            # For PRs, only validate changed modules
            echo "PR event detected - finding changed modules"
            echo "Base ref: ${{ github.base_ref }}"
            echo "Head ref: ${{ github.head_ref }}"

            # GitHub Actions automatically fetches PR head and base
            # Use the merge-base to find the common ancestor
            if base_sha=$(git merge-base HEAD origin/${{ github.base_ref }} 2>/dev/null); then
              changed_files=$(git diff --name-only $base_sha...HEAD)
              echo "Using merge-base approach: $base_sha"
            elif changed_files=$(git diff --name-only HEAD~1 2>/dev/null); then
              echo "Using HEAD~1 fallback"
            else
              echo "Could not determine changed files, validating all modules"
              modules=$(find . -name "*.tf" -type f | sed 's|/[^/]*$||' | sort -u | grep -v ".terraform")
              module_count=$(echo "$modules" | wc -l)
              echo "Found $module_count Terraform modules (fallback to all):"
              echo "$modules"
              echo "modules<<EOF" >> $GITHUB_OUTPUT
              echo "$modules" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "module_count=$module_count" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "Changed files:"
            echo "$changed_files"

            # Find modules containing changed .tf files
            modules=$(echo "$changed_files" | grep -E '\.(tf|tfvars|tfvars\.json)$' | sed 's|/[^/]*$||' | sort -u | grep -v ".terraform" || true)

            if [[ -z "$modules" ]]; then
              echo "No Terraform modules changed in this PR"
              echo "modules=" >> $GITHUB_OUTPUT
              echo "module_count=0" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          module_count=$(echo "$modules" | wc -l)
          echo "Found $module_count Terraform modules to validate:"
          echo "$modules"
          echo "modules<<EOF" >> $GITHUB_OUTPUT
          echo "$modules" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "module_count=$module_count" >> $GITHUB_OUTPUT

      - name: Terraform Format Check
        id: fmt
        if: steps.find-modules.outputs.module_count != '0'
        run: |
          # Only check formatting for changed files in PRs
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Checking formatting for changed modules only..."

            # Use the same logic as the find-modules step
            if base_sha=$(git merge-base HEAD origin/${{ github.base_ref }} 2>/dev/null); then
              changed_tf_files=$(git diff --name-only $base_sha...HEAD | grep -E '\.(tf|tfvars)$' || true)
              echo "Using merge-base approach for formatting check"
            elif changed_tf_files=$(git diff --name-only HEAD~1 | grep -E '\.(tf|tfvars)$' || true); then
              echo "Using HEAD~1 fallback for formatting check"
            else
              echo "Could not determine changed files, checking all files"
              if ! terraform fmt -check -recursive; then
                echo "‚ùå Terraform files are not properly formatted!"
                echo "Run 'terraform fmt -recursive' or 'make fmt' to fix formatting issues."
                exit 1
              fi
              echo "‚úÖ All Terraform files are properly formatted"
              exit 0
            fi

            if [[ -z "$changed_tf_files" ]]; then
              echo "‚úÖ No Terraform files changed"
              exit 0
            fi

            echo "Checking formatting for files:"
            echo "$changed_tf_files"

            # Check formatting only for changed files
            format_issues=""
            while IFS= read -r file; do
              if [[ -n "$file" && -f "$file" ]]; then
                if ! terraform fmt -check "$file"; then
                  format_issues="$format_issues $file"
                fi
              fi
            done <<< "$changed_tf_files"

            if [[ -n "$format_issues" ]]; then
              echo "‚ùå The following files are not properly formatted:"
              echo "$format_issues"
              echo "Run 'terraform fmt -recursive' or 'make fmt' to fix formatting issues."
              exit 1
            fi
          else
            # For push events, check all files
            if ! terraform fmt -check -recursive; then
              echo "‚ùå Terraform files are not properly formatted!"
              echo "Run 'terraform fmt -recursive' or 'make fmt' to fix formatting issues."
              exit 1
            fi
          fi
          echo "‚úÖ All Terraform files are properly formatted"

      - name: Terraform Init and Validate
        if: steps.find-modules.outputs.module_count != '0'
        run: |
          # Validate each changed module
          failed_modules=()
          while IFS= read -r module_path; do
            if [[ -n "$module_path" && -d "$module_path" ]]; then
              echo "::group::Validating module: $module_path"
              cd "$module_path"

              # Initialize Terraform
              if terraform init -backend=false; then
                # Validate Terraform configuration
                if terraform validate; then
                  echo "‚úÖ Module $module_path validated successfully"
                else
                  echo "‚ùå Module $module_path validation failed"
                  failed_modules+=("$module_path")
                fi
              else
                echo "‚ùå Module $module_path initialization failed"
                failed_modules+=("$module_path")
              fi

              # Return to root directory
              cd - > /dev/null
              echo "::endgroup::"
            fi
          done <<< "${{ steps.find-modules.outputs.modules }}"

          # Check if any modules failed
          if [[ ${#failed_modules[@]} -gt 0 ]]; then
            echo "‚ùå The following modules failed validation:"
            for module in "${failed_modules[@]}"; do
              echo "  - $module"
            done
            exit 1
          fi

          echo "‚úÖ All changed modules validated successfully"

      - name: TFSec Security Scan
        if: steps.find-modules.outputs.module_count != '0'
        uses: aquasecurity/tfsec-action@v1.0.3
        continue-on-error: true
        with:
          additional_args: --exclude-downloaded-modules

      - name: Checkov Security Scan
        if: steps.find-modules.outputs.module_count != '0'
        uses: bridgecrewio/checkov-action@v12
        continue-on-error: true
        with:
          directory: .
          quiet: true
          skip_check: CKV_TF_1 # Skip requirement for terraform version constraint
          framework: terraform

      - name: Debug Git State
        run: |
          echo "=== Git Debug Information ==="
          echo "Current branch: $(git branch --show-current)"
          echo "Available remotes:"
          git remote -v
          echo "Available branches:"
          git branch -a | head -10
          echo "Recent commits:"
          git log --oneline -5
          echo "GitHub context:"
          echo "  Event: ${{ github.event_name }}"
          echo "  Base ref: ${{ github.base_ref }}"
          echo "  Head ref: ${{ github.head_ref }}"
          echo "=========================="

      - name: Validation Summary
        run: |
          if [[ "${{ steps.find-modules.outputs.module_count }}" == "0" ]]; then
            echo "## ÔøΩ No Terraform Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No Terraform modules were changed in this PR, so validation was skipped." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "- **Base branch**: ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Head branch**: ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ÔøΩüéâ Terraform Validation Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "### ‚úÖ Successfully validated ${{ steps.find-modules.outputs.module_count }} changed Terraform modules" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ‚úÖ Successfully validated ${{ steps.find-modules.outputs.module_count }} Terraform modules (full validation)" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Formatting**: All files properly formatted" >> $GITHUB_STEP_SUMMARY
            echo "- **Validation**: All modules passed terraform validate" >> $GITHUB_STEP_SUMMARY
            echo "- **Security**: Scanned with TFSec and Checkov" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã Validated Modules" >> $GITHUB_STEP_SUMMARY
            while IFS= read -r module_path; do
              if [[ -n "$module_path" ]]; then
                echo "- \`$module_path\`" >> $GITHUB_STEP_SUMMARY
              fi
            done <<< "${{ steps.find-modules.outputs.modules }}"
          fi
