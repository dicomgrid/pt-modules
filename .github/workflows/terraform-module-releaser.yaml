name: Terraform Module Releaser
on:
  push:
  pull_request:
    types: ["opened", "assigned", "synchronize", "closed"]
  #  branches:
   #   - master
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (no tags or releases created)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: terraform-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || (github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important: fetch all history including tags

      - name: Check Existing Tags
        run: |
          echo "=== Current Tag Status ==="
          echo "Fetching all tags..."
          git fetch --tags
          
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "No tags found")
          echo "Latest existing tag: $latest_tag"
          
          if [[ "$latest_tag" != "No tags found" ]]; then
            echo "✅ Found existing tags - the action will continue from: $latest_tag"
            
            # Show recent tags for context
            echo ""
            echo "Recent tags:"
            git tag --sort=-version:refname | head -5
          else
            echo "⚠️ No existing tags found - this will be the first release"
          fi

      - name: Validate Commit Messages
        run: |
          echo "=== Commit Message Validation ==="
          echo "Checking recent commits for JIRA format and versioning keywords..."

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Analyzing PR commits..."

            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }} || true

            if git rev-parse --verify origin/${{ github.base_ref }} >/dev/null 2>&1; then
              commits=$(git log --oneline origin/${{ github.base_ref }}..HEAD)
            elif git rev-parse --verify ${{ github.base_ref }} >/dev/null 2>&1; then
              commits=$(git log --oneline ${{ github.base_ref }}..HEAD)
            else
              echo "Could not find base branch, using recent commits instead"
              commits=$(git log --oneline -10)
            fi

            echo "PR Commits:"
            echo "$commits"
          else
            echo "Analyzing recent commits..."
            commits=$(git log --oneline -10)
            echo "Recent commits:"
            echo "$commits"
          fi

          echo ""
          echo "=== Checking JIRA format requirement ==="
          
          jira_pattern="^[A-Z]+-[0-9]+:"
          while IFS= read -r commit_line; do
            commit_msg=$(echo "$commit_line" | cut -d' ' -f2-)
            if [[ -n "$commit_msg" ]]; then
              if [[ $commit_msg =~ $jira_pattern ]]; then
                echo "JIRA format: $commit_msg"
              else
                echo "Missing JIRA format: $commit_msg"
                echo "   Expected format: PROJECT-123: <type>: description"
              fi
            fi
          done <<< "$commits"

          echo ""
          echo "=== Checking for versioning keywords ==="

          # Define keyword patterns
          major_pattern="(major|breaking|BREAKING)"
          minor_pattern="(feat|feature|add|new)"
          patch_pattern="(fix|bug|patch|update|chore|docs|refactor)"

          # Check each category
          major_matches=$(echo "$commits" | grep -iE "$major_pattern" || true)
          minor_matches=$(echo "$commits" | grep -iE "$minor_pattern" || true)
          patch_matches=$(echo "$commits" | grep -iE "$patch_pattern" || true)

          echo "Major version keywords found:"
          [[ -n "$major_matches" ]] && echo "$major_matches" || echo "  None"

          echo "Minor version keywords found:"
          [[ -n "$minor_matches" ]] && echo "$minor_matches" || echo "  None"

          echo "Patch version keywords found:"
          [[ -n "$patch_matches" ]] && echo "$patch_matches" || echo "  None"

          if [[ -n "$major_matches" ]] || [[ -n "$minor_matches" ]] || [[ -n "$patch_matches" ]]; then
            echo ""
            echo "✅ Versioning keywords found - release will be triggered"
          else
            echo ""
            echo "⚠️ WARNING: No versioning keywords found in commits"
            echo "Required format: PROJECT-123: <keyword>: description"
            echo "  - major, breaking, BREAKING -> Major version bump"
            echo "  - feat, feature, add, new -> Minor version bump"
            echo "  - fix, bug, patch, update, chore, docs, refactor -> Patch version bump"
          fi

      - name: Terraform Module Releaser
        if: github.event.inputs.dry_run != 'true'
        uses: techpivot/terraform-module-releaser@v1
        with:
          major-keywords: "major,breaking change,BREAKING"
          minor-keywords: "feat,feature,add,new"
          patch-keywords: "fix,bug,patch,update,chore,docs,refactor"

          # This needs to be fully tested in plt-modules with current semvar setup 
          # NOTE: Removed default-first-tag to let action detect existing tags
          # If you have no existing tags and want to start fresh, uncomment the line below:
          # default-first-tag: "xxx"

  
          disable-branding: true
          terraform-docs-version: "v0.20.0"
          delete-legacy-tags: false
     
          disable-wiki: false
          wiki-sidebar-changelog-max: 3
          module-path-ignore: ".github/**,.terraform/**"
          module-change-exclude-patterns: ".gitignore,*.md,*.txt,LICENSE"
          module-asset-exclude-patterns: ".gitignore,*.md,*.txt,LICENSE"
          use-ssh-source-format: false

      - name: Notify on Failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `**Terraform module release failed**

            Please check the [workflow logs](${runUrl}) for details.

            Common fixes:
            - Ensure commit messages follow format: PROJECT-123: <keyword>: description
            - Include versioning keywords (feat, fix, BREAKING, etc.) after JIRA prefix
            - Check that Terraform files are properly formatted
            - Verify all required files are present in the module
            - Confirm existing tags are in valid semver format (v1.2.3)`
            });