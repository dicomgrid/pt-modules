name: Terraform Module Releaser
on:
  pull_request:
    types: [opened, reopened, synchronize, closed] 
    branches:
      - master

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: terraform-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event.action != 'closed'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Commit Messages
        run: |
          echo "=== Commit Message Validation ==="
          echo "Checking recent commits for versioning keywords..."

          # Get PR commits if this is a PR, otherwise recent commits
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Analyzing PR commits..."

            # Fetch the base branch to ensure we have the reference
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }} || true

            # Try different approaches to get PR commits
            if git rev-parse --verify origin/${{ github.base_ref }} >/dev/null 2>&1; then
              commits=$(git log --oneline origin/${{ github.base_ref }}..HEAD)
            elif git rev-parse --verify ${{ github.base_ref }} >/dev/null 2>&1; then
              commits=$(git log --oneline ${{ github.base_ref }}..HEAD)
            else
              echo "Could not find base branch, using recent commits instead"
              commits=$(git log --oneline -10)
            fi

            echo "PR Commits:"
            echo "$commits"
          else
            echo "Analyzing recent commits..."
            commits=$(git log --oneline -10)
            echo "Recent commits:"
            echo "$commits"
          fi

          echo ""
          echo "=== Checking for versioning keywords ==="

          # Define keyword patterns
          major_pattern="(major|breaking|BREAKING)"
          minor_pattern="(feat|feature|add|new)"
          patch_pattern="(fix|bug|patch|update|chore|docs|refactor)"

          # Check each category
          major_matches=$(echo "$commits" | grep -iE "$major_pattern" || true)
          minor_matches=$(echo "$commits" | grep -iE "$minor_pattern" || true)
          patch_matches=$(echo "$commits" | grep -iE "$patch_pattern" || true)

          echo "Major version keywords found:"
          [[ -n "$major_matches" ]] && echo "$major_matches" || echo "  None"

          echo "Minor version keywords found:"
          [[ -n "$minor_matches" ]] && echo "$minor_matches" || echo "  None"

          echo "Patch version keywords found:"
          [[ -n "$patch_matches" ]] && echo "$patch_matches" || echo "  None"

          if [[ -n "$major_matches" ]] || [[ -n "$minor_matches" ]] || [[ -n "$patch_matches" ]]; then
            echo ""
            echo "✅ Versioning keywords found - release will be triggered"
          else
            echo ""
            echo "⚠️ WARNING: No versioning keywords found in commits"
            echo "Add keywords to commit messages for automatic versioning:"
            echo "  - major, breaking, BREAKING -> Major version bump"
            echo "  - feat, feature, add, new -> Minor version bump"
            echo "  - fix, bug, patch, update, chore, docs, refactor -> Patch version bump"
          fi

      - name: Terraform Module Releaser
        uses: techpivot/terraform-module-releaser@v1
        with:

          major-keywords: "major,breaking change,BREAKING"
          minor-keywords: "feat,feature,add,new"
          patch-keywords: "fix,bug,patch,update,chore,docs,refactor"


          default-first-tag: "v1.0.0"
          terraform-docs-version: "v0.20.0"


          delete-legacy-tags: false


          disable-wiki: false
          wiki-sidebar-changelog-max: 10


          module-path-ignore: ".github/**"
          module-change-exclude-patterns: ".gitignore,*.md"
          module-asset-exclude-patterns: ".gitignore,*.md"

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Terraform module release failed**

            Please check the [workflow logs](${runUrl}) for details.

            Common fixes:
            - Ensure commit messages contain versioning keywords (feat, fix, etc.)
            - Check that Terraform files are properly formatted
            - Verify all required files are present in the module`
            });
