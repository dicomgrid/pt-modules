name: Terraform Validation

on:
  pull_request:
    branches: [master]
    paths:
      - '**/*.tf'

jobs:
  terraform-validation:
    runs-on: ubuntu-latest
    name: Terraform Validation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.7.0

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Find Changed Terraform modules
        id: find-modules
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Push event detected - validating all modules"
            modules=$(find . -name "*.tf" -type f | sed 's|/[^/]*$||' | sort -u | grep -v ".terraform")
          else
            echo "PR event detected - finding changed modules"
            echo "Base ref: ${{ github.base_ref }}"
            echo "Head ref: ${{ github.head_ref }}"

            # Use the merge-base to find the common ancestor
            if base_sha=$(git merge-base HEAD origin/${{ github.base_ref }} 2>/dev/null); then
              changed_files=$(git diff --name-only $base_sha...HEAD)
            elif changed_files=$(git diff --name-only HEAD~1 2>/dev/null); then
              echo "Using HEAD~1 fallback"
            else
              echo "Could not determine changed files, validating all modules"
              modules=$(find . -name "*.tf" -type f | sed 's|/[^/]*$||' | sort -u | grep -v ".terraform")
              module_count=$(echo "$modules" | wc -l)
              echo "Found $module_count Terraform modules (fallback to all):"
              echo "$modules"
              echo "modules<<EOF" >> $GITHUB_OUTPUT
              echo "$modules" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "module_count=$module_count" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "Changed files:"
            echo "$changed_files"

            modules=$(echo "$changed_files" | grep -E '\.(tf)$' | sed 's|/[^/]*$||' | sort -u | grep -v ".terraform" || true)

            if [[ -z "$modules" ]]; then
              echo "No Terraform modules changed in this PR"
              echo "modules=" >> $GITHUB_OUTPUT
              echo "module_count=0" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi

          module_count=$(echo "$modules" | wc -l)
          echo "Found $module_count Terraform modules to validate:"
          echo "$modules"
          echo "modules<<EOF" >> $GITHUB_OUTPUT
          echo "$modules" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "module_count=$module_count" >> $GITHUB_OUTPUT

      - name: Terraform Format Check
        id: fmt
        if: steps.find-modules.outputs.module_count != '0'
        run: |
          # Only check formatting for changed files in PRs
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Checking formatting for changed modules only..."

            # Use the same logic as the find-modules step
            if base_sha=$(git merge-base HEAD origin/${{ github.base_ref }} 2>/dev/null); then
              changed_tf_files=$(git diff --name-only $base_sha...HEAD | grep -E '\.(tf|tfvars)$' || true)
              echo "Using merge-base approach for formatting check"
            elif changed_tf_files=$(git diff --name-only HEAD~1 | grep -E '\.(tf|tfvars)$' || true); then
              echo "Using HEAD~1 fallback for formatting check"
            else
              echo "Could not determine changed files, checking all files"
              if ! terraform fmt -check -recursive; then
                echo "Terraform files are not properly formatted!"
                echo "Run 'terraform fmt -recursive' or 'make fmt' to fix formatting issues."
                exit 1
              fi
              echo "All Terraform files are properly formatted"
              exit 0
            fi

            if [[ -z "$changed_tf_files" ]]; then
              echo "No Terraform files changed"
              exit 0
            fi

            echo "Checking formatting for files:"
            echo "$changed_tf_files"

            # Check formatting only for changed files
            format_issues=""
            while IFS= read -r file; do
              if [[ -n "$file" && -f "$file" ]]; then
                if ! terraform fmt -check "$file"; then
                  format_issues="$format_issues $file"
                fi
              fi
            done <<< "$changed_tf_files"

            if [[ -n "$format_issues" ]]; then
              echo "The following files are not properly formatted:"
              echo "$format_issues"
              echo "Run 'terraform fmt -recursive' or 'make fmt' to fix formatting issues."
              exit 1
            fi
          else
            # For push events, check all files
            if ! terraform fmt -check -recursive; then
              echo "Terraform files are not properly formatted!"
              echo "Run 'terraform fmt -recursive' or 'make fmt' to fix formatting issues."
              exit 1
            fi
          fi
          echo "✅ All Terraform files are properly formatted"

      - name: TFLint Check
        if: steps.find-modules.outputs.module_count != '0'
        run: |
          failed_modules=()

          # Initialize TFLint plugins once at the root (reads .tflint.hcl)
          echo "Initializing TFLint plugins..."
          tflint --init

          while IFS= read -r module_path; do
            if [[ -n "$module_path" && -d "$module_path" ]]; then
              echo "::group::Linting module: $module_path"
              cd "$module_path"

              # Run tflint (uses config from root .tflint.hcl)
              if tflint --format=compact --color; then
                echo "✅ Module $module_path linting passed"
              else
                echo "❌ Module $module_path linting failed"
                failed_modules+=("$module_path")
              fi

              cd - > /dev/null
              echo "::endgroup::"
            fi
          done <<< "${{ steps.find-modules.outputs.modules }}"

          if [[ ${#failed_modules[@]} -gt 0 ]]; then
            echo "❌ The following modules failed linting:"
            for module in "${failed_modules[@]}"; do
              echo "  - $module"
            done
            exit 1
          fi

          echo "✅ All modules passed TFLint validation"

      # - name: TFSec Security Scan
      #   if: steps.find-modules.outputs.module_count != '0'
      #   uses: aquasecurity/tfsec-action@v1.0.3
      #   continue-on-error: true
      #   with:
      #     additional_args: --exclude-downloaded-modules

      - name: Validation Summary
        run: |
          if [[ "${{ steps.find-modules.outputs.module_count }}" == "0" ]]; then
            echo "## 📝 No Terraform Changes Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No Terraform modules were changed in this PR, so validation was skipped." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "- **Base branch**: ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Head branch**: ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## 🎉 Terraform Validation Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "### Successfully validated ${{ steps.find-modules.outputs.module_count }} changed Terraform modules" >> $GITHUB_STEP_SUMMARY
            else
              echo "### Successfully validated ${{ steps.find-modules.outputs.module_count }} Terraform modules (full validation)" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Formatting**: All files properly formatted" >> $GITHUB_STEP_SUMMARY
            echo "- **Linting**: All modules passed TFLint validation" >> $GITHUB_STEP_SUMMARY
            echo "- **Security**: Scanned with TFSec" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📋 Validated Modules" >> $GITHUB_STEP_SUMMARY
            while IFS= read -r module_path; do
              if [[ -n "$module_path" ]]; then
                echo "- \`$module_path\`" >> $GITHUB_STEP_SUMMARY
              fi
            done <<< "${{ steps.find-modules.outputs.modules }}"
          fi
